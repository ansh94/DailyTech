package com.anshdeep.dailytech;

import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.AppBarLayout;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;

import com.anshdeep.dailytech.api.model.Article;
import com.anshdeep.dailytech.data.ArticleContract;

import butterknife.BindView;
import butterknife.ButterKnife;

/**
 * Created by ANSHDEEP on 19-05-2017.
 */

public class FavoriteMovieActivity extends AppCompatActivity implements CustomCursorAdapter.CustomCursorAdapterOnClickHandler,
        LoaderManager.LoaderCallbacks<Cursor> {


    @BindView(R.id.toolbar_favorite) Toolbar toolbar;
//    @BindView(R.id.subtitle_favorite) TextView toolbarSubtitle;
//    @BindView(R.id.title_favorite) TextView toolbarTitle;
//    @BindView(R.id.empty_view) View emptyView;


    @BindView(R.id.recyclerView_favorite) RecyclerView recyclerView;
    @BindView(R.id.appBar_favorite) AppBarLayout appBar;


    LinearLayoutManager mLinearLayoutManager;

    public static final String LOG_TAG = FavoriteMovieActivity.class.getSimpleName();

    private static final int ARTICLE_LOADER_ID = 0;

    private boolean favorite = true;

    // Member variables for the adapter and RecyclerView
    private CustomCursorAdapter cAdapter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_favorite);
        ButterKnife.bind(this);

        // Adding toolbar to main screen
        setSupportActionBar(toolbar);
        toolbar.setTitleTextColor(android.graphics.Color.WHITE);
        getSupportActionBar().setTitle("Daily Tech - My Favorite Articles");


        cAdapter = new CustomCursorAdapter(this, this);

        mLinearLayoutManager = new LinearLayoutManager(this);
        recyclerView.setLayoutManager(mLinearLayoutManager);

        recyclerView.setAdapter(cAdapter);
        recyclerView.setHasFixedSize(true);
        recyclerView.setNestedScrollingEnabled(false);

        /*
         Ensure a loader is initialized and active. If the loader doesn't already exist, one is
         created, otherwise the last created loader is re-used.
         */

        getSupportLoaderManager().initLoader(ARTICLE_LOADER_ID, null, this);
    }

    @Override
    protected void onResume() {
        super.onResume();
        getSupportLoaderManager().restartLoader(ARTICLE_LOADER_ID, null, this);
    }

    /**
     * Instantiates and returns a new AsyncTaskLoader with the given ID.
     * This loader will return task data as a Cursor or null if an error occurs.
     * <p>
     * Implements the required callbacks to take care of loading data at all stages of loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return new AsyncTaskLoader<Cursor>(this) {

            // Initialize a Cursor, this will hold all the task data
            Cursor mTaskData = null;

            // onStartLoading() is called when a loader first starts loading data
            @Override
            protected void onStartLoading() {
                if (mTaskData != null) {
                    // Delivers any previously loaded data immediately
                    deliverResult(mTaskData);
                } else {
                    // Force a new load
                    forceLoad();
                }
            }

            // loadInBackground() performs asynchronous loading of data
            @Override
            public Cursor loadInBackground() {
                // Will implement to load data

                // Query and load all task data in the background;

                try {
                    return getContentResolver().query(ArticleContract.ArticleEntry.CONTENT_URI,
                            null,
                            null,
                            null,
                            null);

                } catch (Exception e) {
                    e.printStackTrace();
                    return null;
                }
            }

            // deliverResult sends the result of the load, a Cursor, to the registered listener
            public void deliverResult(Cursor data) {
                mTaskData = data;
                super.deliverResult(data);
            }
        };
    }


    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        // Update the data that the adapter uses to create ViewHolders
        cAdapter.swapCursor(data);
        cAdapter.notifyDataSetChanged();
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        cAdapter.swapCursor(null);
    }


    @Override
    public void onFavoriteArticleClick(Article article) {
//        Toast.makeText(this, "Favorite movie clicked", Toast.LENGTH_SHORT).show();
        Intent intent = new Intent(FavoriteMovieActivity.this, DetailActivity.class);
        intent.putExtra("Article", article);
        intent.putExtra("Favorite", favorite);
        startActivity(intent);
    }
}
